package com.dunkin.app.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.dunkin.app.entity.Board;
import com.dunkin.app.service.BoardService;

import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Controller
@RequestMapping("/board")
public class BoardController { //Thymeleaf
	private final BoardService boardService;

	public BoardController(BoardService boardService) {
		this.boardService = boardService;
	}
	
	@GetMapping("/list")
	public String getAllBoards(Model model) {
		model.addAttribute("boards", boardService.getAllBoard());
		return "board-list";
	}
	
	@GetMapping("/detail/{no}")
	public String getBoard(@PathVariable("no") Long no, Model model, HttpServletRequest request, HttpServletResponse response) {
		Cookie[] cookies=request.getCookies();
		boolean isViewed=false;
		String cookieName="board_view_"+no;
		
		if(cookies !=null) {
			for(Cookie cookie: cookies) {
				if(cookie.getName().equals(cookieName)) {
					isViewed=true;
					break;
				}
		 	}
		}
		//조회한적 없다고 판단된 경우 조회수 증가 및 쿠키추가
		if(!isViewed) {
			boardService.increaseHits(no);
			Cookie newCookie=new Cookie(cookieName,"viewed");
			newCookie.setMaxAge(60*60*24);
			newCookie.setPath("/");
			response.addCookie(newCookie);
		}
		
		model.addAttribute("board",boardService.getBoardById(no));
		return "board-detail";
	}
	
	@GetMapping("/ins")
	public String boardForm(Model model) {
		model.addAttribute("board", new Board());
		return "board-form"; //board-form.html <form th:object="board">
	}
	
	@PostMapping("/save")
	public String saveBoard(@ModelAttribute Board board) {
		boardService.saveBoard(board);
		return "redirect:/board/list";	
	}
	
	@GetMapping("/edit{no}")
	public String editForm(@PathVariable("no") Long no, Model model) {
		model.addAttribute("board",boardService.getBoardById(no));
		return "board-edit";  //board-edit.html <form th:object="board">
	}
	
	@PostMapping("/update/{no}")
	public String updateBoard(@PathVariable("no") Long no, @ModelAttribute Board board) {
		board.setNo(no);
		boardService.updateBoard(board);
		return "redirect:/board/list";
	}
	
	@GetMapping("/delete/{no}")
	public String deleteBoard(@PathVariable("no") Long no) {
		boardService.deleteBoard(no);
		return "redirect:/board/list";
	}
	
}
