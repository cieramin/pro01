package com.dunkin.app.controller;

import java.io.IOException;
import java.util.UUID;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.dunkin.app.entity.Product;
import com.dunkin.app.service.ProductService;

import lombok.RequiredArgsConstructor;

@Controller
@RequiredArgsConstructor
@RequestMapping("product")
public class ProductController {
	private final ProductService productService;
	
	@GetMapping("/list")
	public String getAllList(Model model) {
		model.addAttribute("products",productService.findAll());
		return "product/list";
	}
	
	@GetMapping("/detail/{no}")
	public String getProduct(@PathVariable("no") Long no, Model model) {
		model.addAttribute("product",productService.findById(no));
		return "product/detail";
	}
	
	@GetMapping("/ins")
	public String productForm(Model model) {
		model.addAttribute("product", new Product());
		return "product/form";
	}
	
	//img1=d:\kim\pro02\images\p001.jpg
	@PostMapping("/new")
	public String insProduct(@ModelAttribute Product product, @RequestParam("img1") MultipartFile img1, @RequestParam("img2") MultipartFile img2) throws IOException {
		String uploadPath="src/main/resources/static/images";
		
		if(!img1.isEmpty()) {
			String fileName=UUID.randomUUID()+"_"+img1.getOriginalFileName();
			img1.transferTo(new File(uploadPath+fileName));
			product.setImg1("./images/"+fileName);
		}

		if(!img2.isEmpty()) {
			String fileName=UUID.randomUUID()+"_"+img2.getOriginalFileName();
			img2.transferTo(new File(uploadPath+fileName));
			product.setImg2("./images/"+fileName);
		}
		productService.save(product);
		return "redirect:/product/list";
	}
	
	@GetMapping("/edit/{no}")
	public String editForm(@PathVariable("no") Long no, Model model) {
		model.addAttribute("product",productService.findById(no));
		return "product/edit";
	}
	
	@PostMapping("/update")
	public String update(@ModelAttribute Product product)
	
	
	
}
