package com.dunkin.app.controller;

import org.springframework.boot.web.servlet.server.Session.Cookie;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.dunkin.app.entity.Qna;
import com.dunkin.app.service.QnaService;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;

@Controller
@RequiredArgsConstructor
@RequestMapping("/qna")
@CrossOrigin(origins="*")
public class QnaController {
	private final QnaService qnaService;
	
	@GetMapping("/list")
	public String getAllQna(Model model) {
		model.addAttribute("qnas", qnaService.getAllQnas());
		return "qna/list";
	}
	
	@GetMapping("/detail/{no}") //답글상세보기
	public String getQna(@PathVariable("no") Long no, Model model, HttpServletRequest req, HttpServletResponse res) {
		Cookie[] cookies = req.getCookies();
		boolean isViewed=false;
		String cookieName="qna_view_"+no;
		
		if(cookies!=null) { //사용자의 컴퓨터 쿠키를 순회하여 조회
			for(Cookie cookie:cookies) {
				if(cookie.getName().equals(cookieName)) {
					isViewed=true;
					break;
				}
			}
		}
		//조회한적 없다고 판단될 경우 조회수 증가 및 쿠키추가
		if(!isViewed) {
			qnaService.increaseHits(no);
			Cookie newCookie=new Cookie(cookieName,"viewed");
			newCookie.setMaxAge(60*60*24);
			newCookie.setPath("/");
			res.addCookie(newCookie);
		}
		model.addAttribute("qna", qnaService.findByNo(no));
		model.addAttribute("replies", qnaService.findReplies(no));
		return "qna/detail";
	}
	
	@GetMapping("/question/{parno}") //질문글 상세보기
	public String getQuestion(@PathVariable("parno") Long parno, Model model) {
		model.addAttribute("qnas", qnaService.findReplies(parno));
		return "qna/detail";
	}
	
	@GetMapping("/ins") //질문 폼로딩
	public String QnaForm(Model model) {
		model.addAttribute("qna", new Qna());
		return "qna/form";
	}
	
	@PostMapping("/new") //질문 글쓰기
	public String insQuestion(@ModelAttribute Qna qna) {
		qnaService.save(qna);
		return "redirect:/qna/list";
	}
	
	@PostMapping("/reply/{parno}") //답글쓰기
	public String insReply(@PathVariable("parno") Long parno, @ModelAttribute Qna qna) {
		qna.setParno(parno);
		qnaService.save(qna);
		return "redirect:/qna/list";
	}
	
	@GetMapping("/edit/{no}") //글수정 폼로딩
	public String updateForm(@PathVariable("no") Long no, Model model) {
		model.addAttribute("qna", qnaService.findByNo(no));
		return "qna/edit";
	}
	
	
	@PostMapping("/update") //글수정처리
	public String update(@ModelAttribute Qna qna) {
		qnaService.update(qna);
		return "redirect:/qna/list";
	}
	
	@GetMapping("/reply/del/{no}") //해당답글 삭제
	public String deleteReply(@PathVariable("no") Long no) {
		qnaService.delete(no);
		return "redirect:/qna/list";
	}
	
	@GetMapping("/delete/{parno}") //질문삭제시 해당답글도 연쇄삭제
	public String deleteQuestion(@PathVariable("parno") Long parno) {
		qnaService.deleteByParno(parno);
		return "redirect:/qna/list";
	}
}
